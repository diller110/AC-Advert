<div id="vueEl" class="mt-3 rounded-b rounded-tr bg-white font-thin text-gray-800">
   <div class="flex justify-between items-center mx-4 p-1">
	  <div class="text-xl">
		  Сервера:
	  </div>
	  <div class="">
		  Всего: [[total]]
	  </div>
   </div>
   <div v-if="servers" class="overflow-x-scroll">
		<div v-if="haveChanges" class="leading-none cursor-pointer font-medium bg-red-400 text-white rounded text-center px-1 flex justify-center items-center h-8 mx-3" v-on:click="saveChanges">
		  <i class="material-icons mr-2">save</i>
		  Имеются несохранённые данные! Сохранить?
		</div>
		<table class="w-full text-right">
		  <tr class="border-b-2">
			  <td class="w-12 py-2">Id</td>
			  <td class="pl-2 text-left" style="min-width: 150px;">Название</td>
			  <td class="text-center" style="min-width: 150px;">Адрес</td>
			  <td class="" style="min-width: 50px;">Порт</td>
			  <td class="">Таймер (сек.)</td>
			  <td class="text-center">Действие</td>
		  </tr>
		  <tr is="tablerow"
			  v-for="server in serversFiltered"
			  v-bind:key="server.srv_id"
			  v-bind:server="server"
			  v-on:update="update(server)"
			  v-on:deleteconfirm="deleteconfirm(server)"
			  v-on:edit="edit(server)">
		  </tr>
		</table>
	  <br>
	  <div class="text-center leading-none text-gray-400 pb-3">
		  Нажмите на значение чтобы изменить.<br>Нажмите <span class="text-gray-500">Enter</span> в момент редактирования для сохранения 1 зачения.
	  </div>
   </div>
	<div v-else class="mt-0 m-4 text-center text-2xl text-gray-500 pb-6">
		<i class="material-icons" style="font-size: 100px;">highlight_off</i><br>
		Кажется у вас еще нет серверов...
	</div>
	<!--

	-->
	<div id="popup" class="invisible z-10 fixed top-0 left-0 w-full h-full bg-red-400 flex items-center justify-center align-middle text-gray-700" style="background: rgba(141,162,182, 0.5);">
		<div class="fixed top-0 left-0 w-full h-full" v-on:click="hidePopup"></div>
	   <div class="z-10 flex flex-col w-1/4" style=" min-width: 350px; min-height: 200px; max-height: 95%;">
		  <div class="text-xl p-2 px-3 text-gray-300 bg-gray-700 rounded-t-lg flex justify-between items-center">
			  <span>[[isEdit?'Изменить':'Добавить']] сервер:</span>
			  <i class="material-icons cursor-pointer" v-on:click="hidePopup">close</i>
		  </div>
		  <div class="bg-white p-3 flex flex-col  overflow-y-auto">
			  <input type="hidden" name="srv_id" v-model="popup_server.srv_id">
			  <div class="flex flex-row items-center w-full mb-3">
				  <div class="w-1/3">Название:</div>
				  <input class="bg-gray-200 shadow-inner rounded h-8 p-2 w-full" type="text" name="" placeholder="Название" v-model="popup_server.title">
			  </div>
			  <div class="flex flex-row items-center w-full mb-3">
				  <div class="w-1/3">Адрес:</div>
				  <input class="bg-gray-200 shadow-inner rounded h-8 p-2 w-full" type="text" name="" placeholder="Адрес" v-model="popup_server.ip">
			  </div>
			  <div class="flex flex-row items-center w-full mb-3">
				  <div class="w-1/3">Порт:</div>
				  <input class="bg-gray-200 shadow-inner rounded h-8 p-2 w-full" type="text" name="" placeholder="Порт" v-model="popup_server.port">
			  </div>
			  <div class="flex flex-row items-center w-full mb-3">
				  <div class="w-1/3">Rcon:</div>
				  <input class="bg-gray-200 shadow-inner rounded h-8 p-2 w-full" type="password" name="" placeholder="Rcon" v-model="popup_server.rcon">
			  </div>
			  <div class="flex flex-row items-center w-full">
				  <div class="w-1/3">Таймер:</div>
				  <input class="bg-gray-200 shadow-inner rounded h-8 p-2 w-full" type="text" name="" placeholder="45" v-model="popup_server.adv_time">
			  </div>
		  </div>
		  <div class="rounded-b-lg bg-white flex justify-end p-3 pt-2">
			  <div class="cursor-pointer mr-3 font-medium text-white bg-green-500 hover:bg-green-300 text-center rounded px-3 flex items-center h-8 " v-on:click="addServer">
				  [[isEdit?'Изменить':'Добавить']]
			  </div>
			  <div class="cursor-pointer  text-center px-3 flex items-center h-8" v-on:click="hidePopup">Закрыть</div>
		  </div>
	   </div>
	</div>
</div>
<!--

-->
<template id="tablerow">
	<tr height="40px">
		 <td class="">[[server.srv_id]]</td>
		 <td class="pl-2 text-left" >
			 <input class="outline-none text-left w-full bg-transparent hover:bg-white" type="text" name="" v-model="server.title" v-on:keyup.enter="saveField('title')">
		 </td>
		 <td class="text-center">
			 <input class="outline-none text-center w-full bg-transparent hover:bg-white" type="text" name="" v-model="server.ip" v-on:keyup.enter="saveField('ip')">
		 </td>
		 <td class="w-20">
			 <input class="outline-none w-full bg-transparent text-right hover:bg-white" type="text" name="" v-model="server.port" v-on:keyup.enter="saveField('port')">
		 </td>
		 <td class="w-32">
			 <input class="outline-none w-full bg-transparent text-right hover:bg-white" type="text" name="" v-model="server.adv_time" v-on:keyup.enter="saveField('adv_time')">
		 </td>
		 <td class="text-green-300 text-center whitespace-no-wrap w-40">
			 <span class="tooltip" data-tooltip="Обновить данные" v-on:click="$emit('update', 'server')">
				 <i class="material-icons">publish</i>
			 </span>
			 <span class="tooltip" data-tooltip="Изменить" v-on:click="$emit('edit', 'server')">
				 <i class="material-icons">edit</i>
			 </span>
			 <span class="tooltip" data-tooltip="Удалить" v-on:click="$emit('deleteconfirm', 'server')">
				 <i class="material-icons">delete_forever</i>
			 </span>
		 </td>
	</tr>
</template>
<script>
Vue.component('tablerow', {
	data: function() {
		return {
			original: null
		}
	},
	computed: {
		haveChanges: function() { // 4 часа жизни на эти 10 строк кода....
			delete this.server.haveChanges;
			if(!_.isEqual(this.server, this.original)) {
				this.$set(this.server, 'haveChanges', true);
				return true;
			} else {
				this.$set(this.server, 'haveChanges', undefined);
				return false;
			}
		},
	},
	watch: {
		'server.title': function(newval) {
			this.server.title = newval.trim();
			this.haveChanges;
		},
		'server.ip': function(newval) {
			this.server.ip = newval.trim();
			this.haveChanges;
		},
		'server.port': function(newval) {
			if(typeof this.server.port == 'string')
			this.server.port = newval.trim();
			this.haveChanges;
		},
		'server.adv_time': function(newval) {
			if(typeof this.server.adv_time == 'string')
			this.server.adv_time = newval.trim();
			this.haveChanges;
		}
	},
	methods: {
		saveField: function(field) {
			if(this.server[field] == this.original[field]) {
				return;
			}
			var this2 = this;
			axios.post('{{@BASE}}/api/server/save/field', {
				srv_id: this2.server.srv_id,
				field: field,
				value: this2.server[field]
			}).then(function (response) {
				if(response.data == null) {
					console.log('Error getServers#1:');
					console.log(response);
					vueFlash.flash(true, 'Ошибка при обновлении!');
					return;
				}
				if(response.data === 1) {
					this2.original[field] = this2.server[field];
					this2.haveChanges;
					vueFlash.flash(false, 'Поле обновлено!');
					return;
				}
				vueFlash.flash(true, 'Ошибка при обновлении!');
			});
		}
	},
	props: [
		'server',
	],
	template: '#tablerow',
	mounted: function() {
		this.original = { ...this.server};
	},
	delimiters: ['[[' , ']]']
})
var def_server =  {
	srv_id: -1,
	title: '',
	ip: '',
	port: 27015,
	rcon: '',
	adv_time: 45,
};
var vueInst = new Vue({
	el: '#vueEl',
	data: {
		filterstr: '',
		popup_server: def_server,
		servers: null,
		isEdit: false,
	},
	computed: {
		serversFiltered: function() {
			var str = this.filterstr.toLowerCase();
			var servers = {};
			for(let i = 0; i<this.servers.length; i++) {
				if(str.length < 1) {
					servers[i] = this.servers[i];
					continue;
				}
				if(String(this.servers[i].title).toLowerCase().indexOf(str) == -1 &&
					String(this.servers[i].port).toLowerCase().indexOf(str) == -1 &&
					String(this.servers[i].ip).toLowerCase().indexOf(str) == -1 &&
					String(this.servers[i].adv_time).toLowerCase().indexOf(str) == -1) {
					continue;
				}
				servers[i] = this.servers[i];
			}
			return servers;
		},
		total: function() {
			if(this.servers == null) return 0;
			return this.servers.length;
		},
		haveChanges: function() {
			if(this.servers == null) return false;
			for(let i = 0; i<this.servers.length;i++) {
				if(this.servers[i].haveChanges != undefined) return true;
			}
			return false;
		}
	},
	methods: {
		filterInput: function(event) {
			this.filterstr = event.target.value;
		},
		addServer: function() {
			if(this.popup_server == null) return;
			var this2 = this;
			axios.post('{{@BASE}}/api/server/save', {
				data: this2.popup_server,
			}).then(function (response) {
				if(response.data == null) {
					console.log('Error addServer#1:');
					console.log(response);
					return;
				}
				vueFlash.flash(false, 'Сервер '+(this2.isEdit?'изменён':'добавлен'));
			}).then(() => {
				this2.$nextTick(function () {
			    this2.getServers();
				 this2.hidePopup();
			 	});
			});
		},
		deleteconfirm: function(server) {
			var result = confirm('Вы уверены что хотите удалить сервер:\n'+server.title+'  '+server.ip+':'+server.port);
			if(result) {
				axios.get('{{@BASE}}/api/server/delete/'+server.srv_id).then(function (response) {
					document.location.reload();
				});
			}
		},
		update: function(server) {
			axios.get('{{@BASE}}/api/server/update/'+server.srv_id).then(function (response) {
				if(response.data == null) {
					console.log('Error getServers#1:');
					console.log(response);
					return;
				}
				if(response.data == 0) { // Серверов у пользователя нет
					vueFlash.flash(true, 'При обновлении рекламы сервера: '+server.title+' ('+server.ip+':'+server.port+') произошла ошибка.<br>(Проверьте RCON)');
					return;
				}
				vueFlash.flash(false, 'Результат обновления рекламы:<br><pre>'+response.data+'</pre>');
			});
		},
		edit: function(server) {
			this.isEdit = true;
			this.popup_server = server;
			this.showPopup();
		},
		newButton: function() {
			this.isEdit = false;
			this.popup_server = {...def_server};
			this.showPopup();
		},
		showPopup: function() {
			document.querySelector("#popup").classList.remove("invisible");
		},
		hidePopup: function() {
			document.querySelector("#popup").classList.add("invisible");
		},
		getServers: function() {
			var this2 = this;
			axios.get('{{@BASE}}/api/server/get').then(function (response) {
				if(response.data == null) {
					console.log('Error getServers#1:');
	 				console.log(response);
					return;
				}
				if(response.data == 0) { // Серверов у пользователя нет
					this2.servers = null;
					return;
				}
				this2.servers = response.data;
			});
		},
		saveChanges: function() {
			var this2 = this;
			for(let i = 0; i<this2.servers.length;i++) {
				if(this2.servers[i].haveChanges == undefined) continue;
				axios.post('{{@BASE}}/api/server/save', {
					data: this2.servers[i],
				}).then(function (response) {
					if(response.data == null) {
						console.log('Error saveChanges#1:');
						console.log(response);
						return;
					}
					vueFlash.flash(false, 'Список обновлён');
				}).then(() => {
					this2.$nextTick(function () {
				    this2.getServers();
					 this2.hidePopup();
				 	});
				});
			}
		}
	},
	mounted: function() {
		this.getServers();
	},
	delimiters: ['[[' , ']]']
});
</script>
